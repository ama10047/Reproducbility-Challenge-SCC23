#!/bin/bash

# Define an array of matrix sizes
matrix_sizes=(3000)
# Define the number of processors
num_procs=15
tile_size=500
r=6

# Loop over each matrix size
for size in "${matrix_sizes[@]}"; do
    echo "Running with matrix size: $size"

    # Generate the sbc.txt file
    sbc_file="sbc_$size.txt"
    echo "python sbc.py -r "$r" -n "$size" -o "$sbc_file""

    #python sbc.py -r $((num_procs * 2)) -n $((size / tile_size)) -o "$sbc_file"
    python sbc.py -r "$r" -n "$size" -o "$sbc_file" --extended
    # Define the output file name
    log_file="test_$size.log"
    data_file="data_$size.txt"

    # Execute the command with the current matrix size
    srun --nodes=3 --tasks-per-node=5 --cpus-per-task=9 --mem=100GB chameleon_dtesting -o potrf -n "$size" -b 500 --custom="$sbc_file" --nowarmup --
mtxfmt=1 2>&1 | tee "$log_file"

    # Process the log file to calculate the total communication
    temp=$(egrep 'starpu_comm_stats_memnode' "$log_file" | awk '{s+=$5} END {print s/1024.0}')
    total="Data for matrix size: $size \ncommunication:  $temp"

    # Output the total to both the terminal and a separate file
    echo -e "$total" | tee "data_$size.txt"

    # Process the log file for the gflops and time
    awk -F';' '/Id;Function;threads;gpus;P;Q;mtxfmt;nb;uplo;n;lda;seedA;tsub;time;gflops/{getline; printf "time: %s \ngflops: %s\n", $14, $15}' "$lo
g_file" | tee -a "$data_file"

    echo "Completed for matrix size: $size"
done
